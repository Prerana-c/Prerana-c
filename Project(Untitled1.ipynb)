{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOinkjbMMmjkSuYnpCo0GbS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Prerana-c/Prerana-c/blob/main/Project(Untitled1.ipynb)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import os\n",
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "oVc70FiFwQcb"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_df=pd.read_csv(\"train 2.csv\")\n",
        "print(\"Shape of the Data:\",train_df.shape)\n",
        "train_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "zKaHd2yI1SAf",
        "outputId": "e1a69508-8252-41ad-8c29-fba4ced08782"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of the Data: (913000, 4)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         date  store  item  sales\n",
              "0  2013-01-01      1     1     13\n",
              "1  2013-01-02      1     1     11\n",
              "2  2013-01-03      1     1     14\n",
              "3  2013-01-04      1     1     13\n",
              "4  2013-01-05      1     1     10"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9bc22e6a-e70a-4b32-bcbf-ac80d5f299f1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>store</th>\n",
              "      <th>item</th>\n",
              "      <th>sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2013-01-02</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2013-01-03</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2013-01-04</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2013-01-05</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9bc22e6a-e70a-4b32-bcbf-ac80d5f299f1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9bc22e6a-e70a-4b32-bcbf-ac80d5f299f1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9bc22e6a-e70a-4b32-bcbf-ac80d5f299f1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gkcb2-045j77",
        "outputId": "ae699a0f-a3b9-45a7-dd22-3cd9bec784cc"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "date     0\n",
              "store    0\n",
              "item     0\n",
              "sales    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,4))\n",
        "sns.boxplot(x=train_df[\"sales\"])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "zVbeRepc520j",
        "outputId": "432fbc0d-9208-42ed-f6c4-ad82add58229"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAj8AAAEGCAYAAACKMfTPAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAPKUlEQVR4nO3df6zd9V3H8de791aBXmwZNETroNMOl81mlRG3RV2YGdoyhZGJm5ncRl1qDCt1MZnTMts6TTRGdDS6pM5l4KbLEiCO2DLZsuhfToqBARvDmwnb6n50ZbAVcOOWj3/c03q5t7cUbO857efxSMi593s/p/d9+fQcnnzPuedUay0AAL1YMuwBAAAWk/gBALoifgCArogfAKAr4gcA6Mr481l83nnntdWrV5+kUQAATpy77777m621lXOPP6/4Wb16dfbu3XvipgIAOEmq6pGjHfewFwDQFfEDAHRF/AAAXRE/AEBXxA8A0BXxAwB0RfwAAF0RPwBAV8QPANAV8QMAdEX8AABdET8AQFfEDwDQFfEDAHRF/AAAXRE/AEBXxA8A0BXxAwB0RfwAAF0ZH/YAzLdz585MTU0Ne4xn2bdvX5Jk1apVQ57kxFizZk02b9487DEAGALxM4KmpqZyz/2fz6GzXjTsUY4Ye/LxJMnXvnvq/5UZe/LRYY8AwBCd+v8lO00dOutFeepllw97jCPOfHB3kozUTC/U4Z8FgD55zg8A0BXxAwB0RfwAAF0RPwBAV8QPANAV8QMAdEX8AABdET8AQFfEDwDQFfEDAHRF/AAAXRE/AEBXxA8A0BXxAwB0RfwAAF0RPwBAV8QPANAV8QMAdEX8AABdET8AQFfEDwDQFfEDAHRF/AAAXRE/AEBXxA8A0BXxAwB0RfwAAF0RPwBAV8QPANAV8QMAdEX8AABdET8AQFfEDwDQFfEDAHRF/AAAXRE/AEBXxA8A0BXxAwB0RfwAAF0RPwBAV8QPANCVkYqfnTt3ZufOncMeA+iI+x3oz/iwB5htampq2CMAnXG/A/0ZqTM/AAAnm/gBALoifgCArogfAKAr4gcA6Ir4AQC6In4AgK6IHwCgK+IHAOiK+AEAuiJ+AICuiB8AoCviBwDoivgBALoifgCArogfAKAr4gcA6Ir4AQC6In4AgK6IHwCgK+IHAOiK+AEAuiJ+AICuiB8AoCviBwDoivgBALoifgCArogfAKAr4gcA6Ir4AQC6In4AgK6IHwCgK+IHAOiK+AEAuiJ+AICuiB8AoCviBwDoivgBALoyPuwBAEbBpZdeOuwRSFJVOeuss/LEE08859rly5cnSR5//PEjx8bHxzM9PZ2xsbEcOnQo55xzTr71rW9lcnIy+/fvz549e7JixYo89thjWblyZfbv359169blnnvuyUUXXZSHHnooF1xwQb70pS/l6quvzqtf/eq8613vytvf/vZ84AMfyFVXXZVbbrkl11xzTW699da87W1vy65du7Jt27acffbZz1r7nve8J7fddlsmJyezbdu27NixIzfffHO2bduWJNmxY0euu+663Hjjjbnqqqvy3ve+d951j7Z27uW2bdty7rnnHvXf0YEDB7Jjx45jrllsozBTtdaOe/Ell1zS9u7de9KG2bJlS5Lkfe9730n7HqeCLVu25O4vfj1PvezyYY9yxJkP7k6SkZrphTrzwd151Y+c3/3fM2Ycvt+59957hzwJo2hiYiIHDx58znXj4+M544wznrV2fHw8hw4dyrJly3Lw4MFMTEzkiSeeyBVXXJHWWm6//fZceOGFeeSRRzI2Npbp6el51z3a2rmXV1xxRd75znceda4bbrght99++zHXLLbFnKmq7m6tXTL3uIe9gO4JHxZyPOGTJNPT0/PWTk9Pp7V25PjBgwfTWsuePXtyxx13pLWWhx9+OK21Z4XP7Ovu2bMne/bsedbauZd33HFHDhw4MG+mAwcOHPk+C61ZbKMy00g97LVv37489dRTR/5PrFdTU1NZ8r3jPyPH87Pkf76dqanvdP/3jBlTU1PDHoHOPP300yd07aFDh3LzzTfPO4ty00035ZlnnjnmmsU2KjM955mfqtpUVXurau/+/fsXYyYAOG211nK8Tzk5nrXT09O588475x3/5Cc/eeSM0kJrFtuozPScZ35aa7uS7EpmnvNzModZtWpVEs/5OfycH06OZ874gazxnB8GtmzZ4mEvFlVVJclxBdDxrB0fH89ll1027/gb3vCG7N69O9PT0wuuWWyjMpPn/ADAIlq6dGmWLl163GvHx499nmJsbCyTk5Pzjm/cuDFLliw55prFNioziR+ge6985SuHPQIjamJi4rjWjY+Pz1s7Pj6eqjpyfGJiIlWVDRs2ZP369amqrF69OlU1L3AOX3fDhg3ZsGHDs9bOvVy/fv1Rf2X83HPPPfJ9Flqz2EZlJvEDwMioqixbtuy41i5fvvzIa/0cdjgixsbGkiTnnHNOkmRycjIbNmxIkqxYsSJJsnLlyiTJunXrkiQXXXRRkuSCCy5Iklx99dXZvn17lixZkk2bNmXJkiV585vfnCS55pprsmzZsmzatClJsnXr1nlrt27dmrVr12b79u1ZtmxZtm/fnrVr12ZycjIbN27M2rVrc/3112ft2rXZunXrUa97tLVzL4919uTwdUfhrM9hozCT1/kZQV7n5+TyOj/M5n4HTl9e5wcAIOIHAOiM+AEAuiJ+AICuiB8AoCviBwDoivgBALoifgCArogfAKAr4gcA6Ir4AQC6In4AgK6IHwCgK+IHAOiK+AEAuiJ+AICuiB8AoCviBwDoivgBALoifgCArogfAKAr4gcA6Ir4AQC6In4AgK6IHwCgK+IHAOiK+AEAuiJ+AICuiB8AoCviBwDoivgBALoifgCArogfAKAr4gcA6Ir4AQC6In4AgK6IHwCgK+IHAOjK+LAHmG3NmjXDHgHojPsd6M9Ixc/mzZuHPQLQGfc70B8PewEAXRE/AEBXxA8A0BXxAwB0RfwAAF0RPwBAV8QPANAV8QMAdEX8AABdET8AQFfEDwDQFfEDAHRF/AAAXRE/AEBXxA8A0BXxAwB0RfwAAF0RPwBAV8QPANAV8QMAdEX8AABdET8AQFfEDwDQFfEDAHRF/AAAXRE/AEBXxA8A0BXxAwB0RfwAAF0RPwBAV8QPANAV8QMAdEX8AABdET8AQFfEDwDQFfEDAHRF/AAAXRE/AEBXxA8A0BXxAwB0ZXzYA3B0Y08+mjMf3D3sMY4Ye/JAkozUTC/U2JOPJjl/2GMAMCTiZwStWbNm2CPMs2/fdJJk1arTIRrOH8l/xwAsDvEzgjZv3jzsEQDgtOU5PwBAV8QPANAV8QMAdEX8AABdET8AQFfEDwDQFfEDAHRF/AAAXRE/AEBXxA8A0BXxAwB0RfwAAF0RPwBAV8QPANAV8QMAdEX8AABdET8AQFfEDwDQFfEDAHRF/AAAXanW2vEvrtqf5JGTN06S5Lwk3zzJ34MTz76dmuzbqceenZrs23Bc2FpbOffg84qfxVBVe1trlwx7Dp4f+3Zqsm+nHnt2arJvo8XDXgBAV8QPANCVUYyfXcMegBfEvp2a7Nupx56dmuzbCBm55/wAAJxMo3jmBwDgpBE/AEBXRip+qmp9VX2hqqaq6t3Dnoejq6qHq+q+qrqnqvYOjr2oqu6sqv8cXJ4z7Dl7V1UfrKpvVNX9s44ddZ9qxo2D295nq+ri4U3etwX2bXtV7Rvc5u6pqstnfe33Bvv2har6+eFMTVW9uKo+XVWfq6oHqmrL4Ljb3AgamfipqrEkf5VkQ5KXJ/mVqnr5cKfiGF7fWls363Ur3p3kU621lyb51OBzhutDSdbPObbQPm1I8tLBP5uSvH+RZmS+D2X+viXJXwxuc+taa7uTZHAf+dYkrxhc568H96Usvukkv9Nae3mS1yS5drA/bnMjaGTiJ8lPJplqrX2xtfa9JB9NcuWQZ+L4XZnkpsHHNyV50xBnIUlr7V+TPDrn8EL7dGWSm9uMf0uyoqp+cHEmZbYF9m0hVyb5aGvtu621/0oylZn7UhZZa+2rrbX/GHz8nSSfT7IqbnMjaZTiZ1WSL8/6/CuDY4yeluSfq+ruqto0OHZ+a+2rg4+/luT84YzGc1hon9z+Rt87Bg+PfHDWw8r2bQRV1eokP5HkM3GbG0mjFD+cOn66tXZxZk7bXltVr5v9xTbz+gleQ2HE2adTyvuT/GiSdUm+muTPhzsOC6mqiSS3JPnt1tq3Z3/NbW50jFL87Evy4lmf//DgGCOmtbZvcPmNJLdl5jT71w+fsh1cfmN4E3IMC+2T298Ia619vbV2qLX2TJK/yf89tGXfRkhVLc1M+HyktXbr4LDb3Agapfi5K8lLq+olVfV9mXkS38eHPBNzVNWyqjr78MdJfi7J/ZnZq42DZRuT/ONwJuQ5LLRPH08yOfgNlNckeXzWqXqGbM5zQa7KzG0umdm3t1bV91fVSzLz5Nl/X+z5mPntrSR/m+TzrbUbZn3JbW4EjQ97gMNaa9NV9Y4kn0gyluSDrbUHhjwW852f5LaZ23nGk/x9a+2Oqroryceq6jeSPJLkl4c4I0mq6h+SXJrkvKr6SpJtSf4kR9+n3Ukuz8wTZp9M8muLPjBJFty3S6tqXWYeMnk4yW8mSWvtgar6WJLPZea3ja5trR0axtzkp5Jck+S+qrpncOz34zY3kry9BQDQlVF62AsA4KQTPwBAV8QPANAV8QMAdEX8AABdET/A0FTVh6rql4Y9B9AX8QMAdEX8ACfU4FXA/6mq7q2q+6vqLVX1B1V11+DzXYNXw517vVdV1b8M3jD3E7PeEuC6qvrc4E09P7r4PxFwuhmZV3gGThvrk/x3a+2NSVJVy5Pc2Vr7w8Hnf5fkF5LcfvgKg/dE2pnkytba/qp6S5I/TvLrSd6d5CWtte9W1YrF/VGA05EzP8CJdl+Sy6rqT6vqZ1prjyd5fVV9pqruS/KzSV4x5zo/luTHk9w5eGuA6zPzRo9J8tkkH6mqX83MWzgA/L848wOcUK21h6rq4sy8b9EfVdWnklyb5JLW2peranuSM+ZcrZI80Fp77VH+yDcmeV2SX0yytarWttZEEPCCOfMDnFBV9UNJnmytfTjJnyW5ePClb1bVRJKj/XbXF5KsrKrXDv6MpVX1iqpakuTFrbVPJ/ndJMuTTJz0HwI4rTnzA5xoa5P8WVU9k+TpJL+V5E1J7k/ytSR3zb1Ca+17g195v3HwHKHxJH+Z5KEkHx4cqyQ3ttYeW5wfAzhdeVd3AKArHvYCALoifgCArogfAKAr4gcA6Ir4AQC6In4AgK6IHwCgK/8LUXcs2uzVnJgAAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "remove_outlier=True\n",
        "def transform_data(df,remove_outlier=True):\n",
        "  df=df.copy()\n",
        "  df[\"date\"]=pd.to_datetime(df[\"date\"],infer_datetime_format=True,errors=\"coerce\")\n",
        "  df[\"day\"]=df[\"date\"].dt.day\n",
        "  df[\"month\"]=df[\"date\"].dt.month\n",
        "  df[\"year\"]=df[\"date\"].dt.year\n",
        "  df[\"week\"]=df[\"date\"].dt.week\n",
        "  df[\"weekday\"]=df[\"date\"].dt.weekday\n",
        "  df[\"weekend\"]=df[\"date\"].dt.weekday//4\n",
        "  df[\"month_start\"]=df[\"date\"].dt.is_month_start.astype(int)\n",
        "  df[\"month_end\"]=df[\"date\"].dt.is_month_end.astype(int)\n",
        "  if remove_outlier:\n",
        "    df=df[(df[\"sales\"]<=230)|(df[\"sales\"].isnull())]\n",
        "  return df\n",
        "print(\"Before Transformation:\",train_df.shape)\n",
        "df=transform_data(train_df)\n",
        "print(\"After Transformation:\",df.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nbCaRvkb6cya",
        "outputId": "67926cf3-86b4-4d4d-e219-bf680981fc45"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Before Transformation: (913000, 4)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:8: FutureWarning: Series.dt.weekofyear and Series.dt.week have been deprecated.  Please use Series.dt.isocalendar().week instead.\n",
            "  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After Transformation: (912999, 12)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "dVPwJwqQZogV",
        "outputId": "64fd8f4c-fcae-4d6d-b2f0-4002510127ca"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        date  store  item  sales  day  month  year  week  weekday  weekend  \\\n",
              "0 2013-01-01      1     1     13    1      1  2013     1        1        0   \n",
              "1 2013-01-02      1     1     11    2      1  2013     1        2        0   \n",
              "2 2013-01-03      1     1     14    3      1  2013     1        3        0   \n",
              "3 2013-01-04      1     1     13    4      1  2013     1        4        1   \n",
              "4 2013-01-05      1     1     10    5      1  2013     1        5        1   \n",
              "\n",
              "   month_start  month_end  \n",
              "0            1          0  \n",
              "1            0          0  \n",
              "2            0          0  \n",
              "3            0          0  \n",
              "4            0          0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f22cd484-4ed9-4e9e-9141-c816c39e5540\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>store</th>\n",
              "      <th>item</th>\n",
              "      <th>sales</th>\n",
              "      <th>day</th>\n",
              "      <th>month</th>\n",
              "      <th>year</th>\n",
              "      <th>week</th>\n",
              "      <th>weekday</th>\n",
              "      <th>weekend</th>\n",
              "      <th>month_start</th>\n",
              "      <th>month_end</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2013-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2013-01-02</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2013-01-03</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>14</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2013-01-04</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2013-01-05</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f22cd484-4ed9-4e9e-9141-c816c39e5540')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f22cd484-4ed9-4e9e-9141-c816c39e5540 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f22cd484-4ed9-4e9e-9141-c816c39e5540');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,4))\n",
        "sns.boxplot(x=df[\"sales\"])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "RXcw4U6lQTrc",
        "outputId": "ca40931d-d0b9-464f-d35b-81d0310ce346"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lags=[91,98,105,112,119,126,182,364,546,728]\n",
        "def lag_features(df,lags):\n",
        "    cols=[\"date\",\"store\",\"item\"]\n",
        "    train=df.copy()\n",
        "    for lag in lags:\n",
        "        lagged=train[[\"date\",\"store\",\"item\",\"sales\"]].copy()\n",
        "        lagged[\"date\"]=lagged[\"date\"]+pd.Timedelta(days=lag)\n",
        "        df=pd.merge(df,lagged,on=cols,how=\"left\",suffixes=(\"\",f\"_lag_{lag}\"))\n",
        "    return df\n",
        "df=lag_features(df,lags)\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "en=OneHotEncoder(sparse=False)\n",
        "enc_features=pd.DataFrame(en.fit_transform(df[[\"store\",\"item\"]]),columns=en.get_feature_names_out())\n",
        "df.drop([\"store\",\"item\"],axis=1,inplace=True)\n",
        "df=pd.concat([enc_features,df],axis=1)"
      ],
      "metadata": {
        "id": "rA9bnhfubvNw"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L7bfCGX-rP08",
        "outputId": "d35aed40-0c28-478e-dc0f-74cab8c42cea"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.tail of         store_1  store_2  store_3  store_4  store_5  store_6  store_7  \\\n",
              "0           1.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "1           1.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "2           1.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "3           1.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "4           1.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "...         ...      ...      ...      ...      ...      ...      ...   \n",
              "912994      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "912995      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "912996      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "912997      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "912998      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "\n",
              "        store_8  store_9  store_10  ...  sales_lag_91  sales_lag_98  \\\n",
              "0           0.0      0.0       0.0  ...           NaN           NaN   \n",
              "1           0.0      0.0       0.0  ...           NaN           NaN   \n",
              "2           0.0      0.0       0.0  ...           NaN           NaN   \n",
              "3           0.0      0.0       0.0  ...           NaN           NaN   \n",
              "4           0.0      0.0       0.0  ...           NaN           NaN   \n",
              "...         ...      ...       ...  ...           ...           ...   \n",
              "912994      0.0      0.0       1.0  ...          80.0          72.0   \n",
              "912995      0.0      0.0       1.0  ...          82.0          89.0   \n",
              "912996      0.0      0.0       1.0  ...          90.0          97.0   \n",
              "912997      0.0      0.0       1.0  ...         103.0          97.0   \n",
              "912998      0.0      0.0       1.0  ...          99.0          99.0   \n",
              "\n",
              "        sales_lag_105  sales_lag_112  sales_lag_119  sales_lag_126  \\\n",
              "0                 NaN            NaN            NaN            NaN   \n",
              "1                 NaN            NaN            NaN            NaN   \n",
              "2                 NaN            NaN            NaN            NaN   \n",
              "3                 NaN            NaN            NaN            NaN   \n",
              "4                 NaN            NaN            NaN            NaN   \n",
              "...               ...            ...            ...            ...   \n",
              "912994           84.0           79.0           79.0          104.0   \n",
              "912995           90.0           78.0           89.0           89.0   \n",
              "912996           94.0           97.0           96.0           98.0   \n",
              "912997           97.0           93.0           92.0           92.0   \n",
              "912998          107.0           96.0          102.0          116.0   \n",
              "\n",
              "        sales_lag_182  sales_lag_364  sales_lag_546  sales_lag_728  \n",
              "0                 NaN            NaN            NaN            NaN  \n",
              "1                 NaN            NaN            NaN            NaN  \n",
              "2                 NaN            NaN            NaN            NaN  \n",
              "3                 NaN            NaN            NaN            NaN  \n",
              "4                 NaN            NaN            NaN            NaN  \n",
              "...               ...            ...            ...            ...  \n",
              "912994           91.0           43.0           80.0           51.0  \n",
              "912995          122.0           68.0           91.0           44.0  \n",
              "912996          112.0           63.0          101.0           59.0  \n",
              "912997          119.0           64.0          113.0           63.0  \n",
              "912998          120.0           69.0          123.0           81.0  \n",
              "\n",
              "[912999 rows x 80 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X=df[~df[\"sales\"].isnull()]\n",
        "test=df[df[\"sales\"].isnull()]\n",
        "X.fillna(0,inplace=True)\n",
        "test.fillna(0,inplace=True)\n",
        "x_train=X[(X[\"date\"]<=\"2017-09-1\")].copy()\n",
        "x_test=X[(X[\"date\"]>\"2017-09-1\")].copy()\n",
        "y_train=x_train[\"sales\"].copy()\n",
        "y_test=x_test[\"sales\"].copy()\n",
        "x_train.drop([\"sales\",\"date\"],axis=1,inplace=True)\n",
        "x_test.drop([\"sales\",\"date\"],axis=1,inplace=True)\n",
        "test.drop([\"sales\",\"date\"],axis=1,inplace=True)\n",
        "x_train.shape,y_train.shape,x_test.shape,y_test.shape,test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1HIHWIc5rX0R",
        "outputId": "8bca6b65-1a15-4bad-b624-00b284f731d9"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:5182: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  downcast=downcast,\n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4913: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  errors=errors,\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((852499, 78), (852499,), (60500, 78), (60500,), (0, 78))"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "scale=MinMaxScaler()\n",
        "x_train=pd.DataFrame(scale.fit_transform(x_train),columns=x_train.columns)\n",
        "x_test=pd.DataFrame(scale.transform(x_test),columns=x_test.columns)\n",
        "#test=pd.DataFrame(scale.transform(test),columns=test.columns)\n",
        "x_train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "n1nvfXH4wpWe",
        "outputId": "670f912b-11be-43d9-a414-d2bb96919c82"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   store_1  store_2  store_3  store_4  store_5  store_6  store_7  store_8  \\\n",
              "0      1.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "1      1.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "2      1.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "3      1.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "4      1.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
              "\n",
              "   store_9  store_10  ...  sales_lag_91  sales_lag_98  sales_lag_105  \\\n",
              "0      0.0       0.0  ...           0.0           0.0            0.0   \n",
              "1      0.0       0.0  ...           0.0           0.0            0.0   \n",
              "2      0.0       0.0  ...           0.0           0.0            0.0   \n",
              "3      0.0       0.0  ...           0.0           0.0            0.0   \n",
              "4      0.0       0.0  ...           0.0           0.0            0.0   \n",
              "\n",
              "   sales_lag_112  sales_lag_119  sales_lag_126  sales_lag_182  sales_lag_364  \\\n",
              "0            0.0            0.0            0.0            0.0            0.0   \n",
              "1            0.0            0.0            0.0            0.0            0.0   \n",
              "2            0.0            0.0            0.0            0.0            0.0   \n",
              "3            0.0            0.0            0.0            0.0            0.0   \n",
              "4            0.0            0.0            0.0            0.0            0.0   \n",
              "\n",
              "   sales_lag_546  sales_lag_728  \n",
              "0            0.0            0.0  \n",
              "1            0.0            0.0  \n",
              "2            0.0            0.0  \n",
              "3            0.0            0.0  \n",
              "4            0.0            0.0  \n",
              "\n",
              "[5 rows x 78 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d4559105-4368-4a1d-82d8-e18099d85392\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>store_1</th>\n",
              "      <th>store_2</th>\n",
              "      <th>store_3</th>\n",
              "      <th>store_4</th>\n",
              "      <th>store_5</th>\n",
              "      <th>store_6</th>\n",
              "      <th>store_7</th>\n",
              "      <th>store_8</th>\n",
              "      <th>store_9</th>\n",
              "      <th>store_10</th>\n",
              "      <th>...</th>\n",
              "      <th>sales_lag_91</th>\n",
              "      <th>sales_lag_98</th>\n",
              "      <th>sales_lag_105</th>\n",
              "      <th>sales_lag_112</th>\n",
              "      <th>sales_lag_119</th>\n",
              "      <th>sales_lag_126</th>\n",
              "      <th>sales_lag_182</th>\n",
              "      <th>sales_lag_364</th>\n",
              "      <th>sales_lag_546</th>\n",
              "      <th>sales_lag_728</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 78 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4559105-4368-4a1d-82d8-e18099d85392')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d4559105-4368-4a1d-82d8-e18099d85392 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d4559105-4368-4a1d-82d8-e18099d85392');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "glm=LinearRegression()\n",
        "glm.fit(x_train,y_train)\n",
        "print(\"RMSE score\")\n",
        "print (np.sqrt(mean_squared_error(y_test,glm.predict(x_test))))\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "rf=RandomForestRegressor(n_estimators=100,max_depth=6)\n",
        "rf.fit(x_train,y_train)\n",
        "print(\"RMSE score\")\n",
        "print(np.sqrt(mean_squared_error(y_test,rf.predict(x_test))))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pCjys9GW4sfh",
        "outputId": "cdb0e1b4-4df3-4dea-98c5-cd4b477dfaff"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE score\n",
            "9.854486082110819\n",
            "RMSE score\n",
            "10.176456772820726\n"
          ]
        }
      ]
    }
  ]
}